<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloud.ecloud.oauthz.mapper.OauthAccessTokenMapper">
  <resultMap id="BaseResultMap" type="com.cloud.ecloud.oauthz.entity.OauthAccessToken">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="access_token" jdbcType="VARCHAR" property="access_token" />
    <result column="oauth_code" jdbcType="VARCHAR" property="oauth_code" />
    <result column="app_key" jdbcType="VARCHAR" property="app_key" />
    <result column="user_id" jdbcType="BIGINT" property="user_id" />
    <result column="user_name" jdbcType="VARCHAR" property="user_name" />
    <result column="tenant_id" jdbcType="BIGINT" property="tenant_id" />
    <result column="tenant_code" jdbcType="VARCHAR" property="tenant_code" />
    <result column="token_type" jdbcType="VARCHAR" property="token_type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="create_time" />
    <result column="expires_in" jdbcType="INTEGER" property="expires_in" />
    <result column="refresh_token" jdbcType="VARCHAR" property="refresh_token" />
    <result column="refresh_token_expire_seconds" jdbcType="INTEGER" property="refresh_token_expire_seconds" />
    <result column="has_been_refreshed" jdbcType="BIT" property="has_been_refreshed" />
    <result column="refresh_from" jdbcType="VARCHAR" property="refresh_from" />
  </resultMap>
  <sql id="Base_Column_List">
    id, access_token, oauth_code, app_key, user_id, user_name, tenant_id, tenant_code, 
    token_type, create_time, expires_in, refresh_token, refresh_token_expire_seconds, 
    has_been_refreshed, refresh_from
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from oauth_access_token
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from oauth_access_token
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.cloud.ecloud.oauthz.entity.OauthAccessToken">
    insert into oauth_access_token (id, access_token, oauth_code, 
      app_key, user_id, user_name, 
      tenant_id, tenant_code, token_type, 
      create_time, expires_in, refresh_token, 
      refresh_token_expire_seconds, has_been_refreshed, 
      refresh_from)
    values (#{id,jdbcType=BIGINT}, #{access_token,jdbcType=VARCHAR}, #{oauth_code,jdbcType=VARCHAR}, 
      #{app_key,jdbcType=VARCHAR}, #{user_id,jdbcType=BIGINT}, #{user_name,jdbcType=VARCHAR}, 
      #{tenant_id,jdbcType=BIGINT}, #{tenant_code,jdbcType=VARCHAR}, #{token_type,jdbcType=VARCHAR}, 
      #{create_time,jdbcType=TIMESTAMP}, #{expires_in,jdbcType=INTEGER}, #{refresh_token,jdbcType=VARCHAR}, 
      #{refresh_token_expire_seconds,jdbcType=INTEGER}, #{has_been_refreshed,jdbcType=BIT}, 
      #{refresh_from,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cloud.ecloud.oauthz.entity.OauthAccessToken">
    insert into oauth_access_token
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="access_token != null">
        access_token,
      </if>
      <if test="oauth_code != null">
        oauth_code,
      </if>
      <if test="app_key != null">
        app_key,
      </if>
      <if test="user_id != null">
        user_id,
      </if>
      <if test="user_name != null">
        user_name,
      </if>
      <if test="tenant_id != null">
        tenant_id,
      </if>
      <if test="tenant_code != null">
        tenant_code,
      </if>
      <if test="token_type != null">
        token_type,
      </if>
      <if test="create_time != null">
        create_time,
      </if>
      <if test="expires_in != null">
        expires_in,
      </if>
      <if test="refresh_token != null">
        refresh_token,
      </if>
      <if test="refresh_token_expire_seconds != null">
        refresh_token_expire_seconds,
      </if>
      <if test="has_been_refreshed != null">
        has_been_refreshed,
      </if>
      <if test="refresh_from != null">
        refresh_from,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="access_token != null">
        #{access_token,jdbcType=VARCHAR},
      </if>
      <if test="oauth_code != null">
        #{oauth_code,jdbcType=VARCHAR},
      </if>
      <if test="app_key != null">
        #{app_key,jdbcType=VARCHAR},
      </if>
      <if test="user_id != null">
        #{user_id,jdbcType=BIGINT},
      </if>
      <if test="user_name != null">
        #{user_name,jdbcType=VARCHAR},
      </if>
      <if test="tenant_id != null">
        #{tenant_id,jdbcType=BIGINT},
      </if>
      <if test="tenant_code != null">
        #{tenant_code,jdbcType=VARCHAR},
      </if>
      <if test="token_type != null">
        #{token_type,jdbcType=VARCHAR},
      </if>
      <if test="create_time != null">
        #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="expires_in != null">
        #{expires_in,jdbcType=INTEGER},
      </if>
      <if test="refresh_token != null">
        #{refresh_token,jdbcType=VARCHAR},
      </if>
      <if test="refresh_token_expire_seconds != null">
        #{refresh_token_expire_seconds,jdbcType=INTEGER},
      </if>
      <if test="has_been_refreshed != null">
        #{has_been_refreshed,jdbcType=BIT},
      </if>
      <if test="refresh_from != null">
        #{refresh_from,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cloud.ecloud.oauthz.entity.OauthAccessToken">
    update oauth_access_token
    <set>
      <if test="access_token != null">
        access_token = #{access_token,jdbcType=VARCHAR},
      </if>
      <if test="oauth_code != null">
        oauth_code = #{oauth_code,jdbcType=VARCHAR},
      </if>
      <if test="app_key != null">
        app_key = #{app_key,jdbcType=VARCHAR},
      </if>
      <if test="user_id != null">
        user_id = #{user_id,jdbcType=BIGINT},
      </if>
      <if test="user_name != null">
        user_name = #{user_name,jdbcType=VARCHAR},
      </if>
      <if test="tenant_id != null">
        tenant_id = #{tenant_id,jdbcType=BIGINT},
      </if>
      <if test="tenant_code != null">
        tenant_code = #{tenant_code,jdbcType=VARCHAR},
      </if>
      <if test="token_type != null">
        token_type = #{token_type,jdbcType=VARCHAR},
      </if>
      <if test="create_time != null">
        create_time = #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="expires_in != null">
        expires_in = #{expires_in,jdbcType=INTEGER},
      </if>
      <if test="refresh_token != null">
        refresh_token = #{refresh_token,jdbcType=VARCHAR},
      </if>
      <if test="refresh_token_expire_seconds != null">
        refresh_token_expire_seconds = #{refresh_token_expire_seconds,jdbcType=INTEGER},
      </if>
      <if test="has_been_refreshed != null">
        has_been_refreshed = #{has_been_refreshed,jdbcType=BIT},
      </if>
      <if test="refresh_from != null">
        refresh_from = #{refresh_from,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cloud.ecloud.oauthz.entity.OauthAccessToken">
    update oauth_access_token
    set access_token = #{access_token,jdbcType=VARCHAR},
      oauth_code = #{oauth_code,jdbcType=VARCHAR},
      app_key = #{app_key,jdbcType=VARCHAR},
      user_id = #{user_id,jdbcType=BIGINT},
      user_name = #{user_name,jdbcType=VARCHAR},
      tenant_id = #{tenant_id,jdbcType=BIGINT},
      tenant_code = #{tenant_code,jdbcType=VARCHAR},
      token_type = #{token_type,jdbcType=VARCHAR},
      create_time = #{create_time,jdbcType=TIMESTAMP},
      expires_in = #{expires_in,jdbcType=INTEGER},
      refresh_token = #{refresh_token,jdbcType=VARCHAR},
      refresh_token_expire_seconds = #{refresh_token_expire_seconds,jdbcType=INTEGER},
      has_been_refreshed = #{has_been_refreshed,jdbcType=BIT},
      refresh_from = #{refresh_from,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>